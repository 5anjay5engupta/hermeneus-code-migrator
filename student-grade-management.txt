To translate the given Pascal code into PostgreSQL, we will create a stored procedure that mimics the functionality of the Pascal program. This involves handling input, processing student data, and calculating averages. PostgreSQL does not directly support interactive input/output like a traditional programming language, so we'll simulate this using temporary tables and functions.

Here's the translated PostgreSQL code:

```sql
-- PostgreSQL student grade management

-- Create a temporary table to store student data
CREATE TEMP TABLE students (
    id SERIAL PRIMARY KEY,
    name VARCHAR(50),
    grades REAL[],
    average REAL
);

-- Function to calculate the average of grades
CREATE OR REPLACE FUNCTION calculate_average(grades REAL[]) RETURNS REAL AS $$
DECLARE
    sum REAL := 0;
    average REAL;
BEGIN
    -- Calculate the sum of grades
    FOR i IN 1..array_length(grades, 1) LOOP
        sum := sum + grades[i];
    END LOOP;
    -- Calculate the average
    average := sum / array_length(grades, 1);
    RETURN average;
END;
$$ LANGUAGE plpgsql;

-- Function to simulate the student grade management system
CREATE OR REPLACE FUNCTION manage_student_grades(student_count INTEGER, student_data JSON) RETURNS VOID AS $$
DECLARE
    i INTEGER;
    student JSON;
    student_id INTEGER;
    student_name VARCHAR(50);
    student_grades REAL[];
    student_average REAL;
BEGIN
    -- Loop through each student data
    FOR i IN 0..(student_count - 1) LOOP
        -- Extract student data from JSON
        student := student_data->i;
        student_id := (student->>'id')::INTEGER;
        student_name := student->>'name';
        student_grades := ARRAY[
            (student->>'grade1')::REAL,
            (student->>'grade2')::REAL,
            (student->>'grade3')::REAL,
            (student->>'grade4')::REAL,
            (student->>'grade5')::REAL
        ];
        
        -- Calculate the average
        student_average := calculate_average(student_grades);
        
        -- Insert student data into the temporary table
        INSERT INTO students (id, name, grades, average)
        VALUES (student_id, student_name, student_grades, student_average);
        
        -- Output the average
        RAISE NOTICE 'Student ID: %, Name: %, Average: %', student_id, student_name, student_average;
    END LOOP;
END;
$$ LANGUAGE plpgsql;

-- Example usage:
-- Assuming you have a JSON array of student data like below:
-- SELECT manage_student_grades(2, '[{"id": 1, "name": "Alice", "grade1": 85, "grade2": 90, "grade3": 78, "grade4": 92, "grade5": 88}, {"id": 2, "name": "Bob", "grade1": 75, "grade2": 80, "grade3": 85, "grade4": 70, "grade5": 90}]'::JSON);
```

### Explanation:
- **Temporary Table**: We use a temporary table `students` to store student data, including their grades and calculated average.
- **Function `calculate_average`**: This function calculates the average of an array of grades.
- **Function `manage_student_grades`**: This function simulates the main logic of the Pascal program. It takes the number of students and a JSON array of student data as input. It processes each student's data, calculates the average, and stores it in the temporary table.
- **RAISE NOTICE**: Used to simulate output in PostgreSQL, similar to `writeln` in Pascal.

### Usage:
- The function `manage_student_grades` can be called with the number of students and a JSON array containing student data to simulate the input and output operations.